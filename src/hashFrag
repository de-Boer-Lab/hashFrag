#!/usr/bin/env python

import os
import json
import argparse
import importlib

with open(os.path.join(os.path.dirname(__file__),"messages.json"), "r") as f:
    messages_dict = json.load(f)

def main():
    parser = argparse.ArgumentParser(prog="hashFrag",description=messages_dict["hashFrag_description"])
    subparsers = parser.add_subparsers(dest="command")

    # blastn
    blast_parser = subparsers.add_parser("blastn",description=messages_dict["blastn"]["description"],help=messages_dict["blastn"]["help"])
    blast_parser.add_argument('-f','--fasta_path',type=str,default=None,help=messages_dict["blastn"]["args"]["fasta_path"])
    blast_parser.add_argument('--train_fasta_path',type=str,default=None,help=messages_dict["blastn"]["args"]["train_fasta_path"])
    blast_parser.add_argument('--test_fasta_path',type=str,default=None,help=messages_dict["blastn"]["args"]["test_fasta_path"])
    blast_parser.add_argument('-w','--word_size',type=int,default=11,help=messages_dict["blastn"]["args"]["word_size"])
    blast_parser.add_argument('-g','--gapopen',type=int,default=2,help=messages_dict["blastn"]["args"]["gapopen"])
    blast_parser.add_argument('-x','--gapextend',type=int,default=1,help=messages_dict["blastn"]["args"]["gapextend"])
    blast_parser.add_argument('-p','--penalty',type=int,default=-1,help=messages_dict["blastn"]["args"]["penalty"])
    blast_parser.add_argument('-r','--reward',type=int,default=1,help=messages_dict["blastn"]["args"]["reward"])
    blast_parser.add_argument('-m','--max_target_seqs',type=int,default=500,help=messages_dict["blastn"]["args"]["max_target_seqs"])
    blast_parser.add_argument('-e','--e_value',type=int,default=10,help=messages_dict["blastn"]["args"]["e_value"])
    blast_parser.add_argument('-d','--dust',type=str,default="no",help=messages_dict["blastn"]["args"]["dust"])
    blast_parser.add_argument('-b','--blastdb_args',type=str,default=None,help=messages_dict["blastn"]["args"]["blastdb_args"])
    blast_parser.add_argument('--blastdb_label',type=str,default=None,help=messages_dict["blastn"]["args"]["blastdb_label"])
    blast_parser.add_argument('-B','--blastn_args',type=str,default=None,help=messages_dict["blastn"]["args"]["blastn_args"])
    blast_parser.add_argument('-t','--threads',type=int,default=1,help=messages_dict["blastn"]["args"]["threads"])
    blast_parser.add_argument('-o','--output_dir',type=str,required=True,help=messages_dict["blastn"]["args"]["output_dir"])
    blast_parser.set_defaults(func=lambda args: importlib.import_module("modules.blastn").run(args))
    # blast_parser.set_defaults(func=importlib.import_module("blastn").run)

    # filter_false_positives #TODO: rename/refactor to filter_candidates
    fp_parser = subparsers.add_parser("filter_false_positives",description=messages_dict["filter_false_positives"]["description"],help=messages_dict["filter_false_positives"]["help"])
    fp_parser.add_argument('-i','--input_path',type=str,required=True,help=messages_dict["filter_false_positives"]["args"]["input_path"])
    fp_parser.add_argument('-m','--mode',type=str,required=True,help=messages_dict["filter_false_positives"]["args"]["mode"])
    fp_parser.add_argument('-g','--gapopen',type=int,default=2,help=messages_dict["filter_false_positives"]["args"]["gapopen"])
    fp_parser.add_argument('-x','--gapextend',type=int,default=1,help=messages_dict["filter_false_positives"]["args"]["gapextend"])
    fp_parser.add_argument('-p','--penalty',type=int,default=-1,help=messages_dict["filter_false_positives"]["args"]["penalty"])
    fp_parser.add_argument('-r','--reward',type=int,default=1,help=messages_dict["filter_false_positives"]["args"]["reward"])
    fp_parser.add_argument('-t','--threshold',type=int,required=True,help=messages_dict["filter_false_positives"]["args"]["threshold"])
    fp_parser.add_argument('-o','--out_dir',type=str,required=True,help=messages_dict["filter_false_positives"]["args"]["output_dir"])
    fp_parser.set_defaults(func=lambda args: importlib.import_module("modules.filter_false_positives").run(args))
    # filtering_parser.set_defaults(func=importlib.import_module("filter_false_positives").run)

    # filter_existing_splits
    filter_parser = subparsers.add_parser("filter_existing_splits",description=messages_dict["filter_existing_splits"]["description"],help=messages_dict["filter_existing_splits"]["help"])
    filter_parser.add_argument('--train_fasta_path',type=str,required=True,help=messages_dict["filter_existing_splits"]["args"]["train_fasta_path"])
    filter_parser.add_argument('--test_fasta_path',type=str,required=True,help=messages_dict["filter_existing_splits"]["args"]["test_fasta_path"])
    filter_parser.add_argument('--hits_path',type=str,required=True,help=messages_dict["filter_existing_splits"]["args"]["hits_path"])
    filter_parser.set_defaults(func=lambda args: importlib.import_module("modules.filter_existing_splits").run(args))
    # filteredsplit_parser.set_defaults(func=importlib.import_module("filter_existing_splits").run)

    # stratify_test_split
    stratify_parser = subparsers.add_parser("stratify_test_split",description=messages_dict["stratify_test_split"]["description"],help=messages_dict["stratify_test_split"]["help"])
    stratify_parser.add_argument('-f','--test_fasta_path',type=str,required=True,help=messages_dict["stratify_test_split"]["args"]["test_fasta_path"])
    stratify_parser.add_argument('-i','--input_path',type=str,required=True,help=messages_dict["stratify_test_split"]["args"]["input_path"])
    stratify_parser.add_argument('-m','--mode',type=str,required=True,help=messages_dict["stratify_test_split"]["args"]["mode"])
    stratify_parser.add_argument('-g','--gapopen',type=int,default=2,help=messages_dict["stratify_test_split"]["args"]["gapopen"])
    stratify_parser.add_argument('-x','--gapextend',type=int,default=1,help=messages_dict["stratify_test_split"]["args"]["gapextend"])
    stratify_parser.add_argument('-p','--penalty',type=int,default=-1,help=messages_dict["stratify_test_split"]["args"]["penalty"])
    stratify_parser.add_argument('-r','--reward',type=int,default=1,help=messages_dict["stratify_test_split"]["args"]["reward"])
    stratify_parser.add_argument('-s','--step',type=int,default=10,help=messages_dict["stratify_test_split"]["args"]["step"])
    stratify_parser.add_argument('-o','--output_path',type=str,required=True,help=messages_dict["stratify_test_split"]["args"]["output_path"])
    stratify_parser.set_defaults(func=lambda args: importlib.import_module("modules.stratify_test_split").run(args))
    # stratify_parser.set_defaults(func=importlib.import_module("stratify_test_split").run)

    # identify_homologous_groups
    homology_parser = subparsers.add_parser("identify_homologous_groups",description=messages_dict["identify_homologous_groups"]["description"],help=messages_dict["identify_homologous_groups"]["help"])
    homology_parser.add_argument('-i','--hits_path',type=str,required=True,help=messages_dict["identify_homologous_groups"]["args"]["hits_path"])
    homology_parser.add_argument('-o','--output_path',type=str,required=True,help=messages_dict["identify_homologous_groups"]["args"]["output_path"])
    homology_parser.set_defaults(func=lambda args: importlib.import_module("modules.identify_homologous_groups").run(args))
    # homology_parser.set_defaults(func=importlib.import_module("identify_homologous_groups").run)

    # create_orthogonal_splits
    orthosplit_parser = subparsers.add_parser("create_orthogonal_splits",description=messages_dict["create_orthogonal_splits"]["description"],help=messages_dict["create_orthogonal_splits"]["help"])
    orthosplit_parser.add_argument('-f','--fasta_path',type=str,required=True,help=messages_dict["create_orthogonal_splits"]["args"]["fasta_path"])
    orthosplit_parser.add_argument('-i','--homology_path',type=str,required=True,help=messages_dict["create_orthogonal_splits"]["args"]["homology_path"])
    orthosplit_parser.add_argument('--p_train',type=float,default=0.8,help=messages_dict["create_orthogonal_splits"]["args"]["p_train"])
    orthosplit_parser.add_argument('--p_test',type=float,default=0.2,help=messages_dict["create_orthogonal_splits"]["args"]["p_test"])
    orthosplit_parser.add_argument('-n','--n_splits',type=int,default=1,help=messages_dict["create_orthogonal_splits"]["args"]["n_splits"])
    orthosplit_parser.add_argument('-s','--seed',type=int,default=21,help=messages_dict["create_orthogonal_splits"]["args"]["seed"])
    orthosplit_parser.add_argument('-o','--output_dir',type=str,required=True,help=messages_dict["create_orthogonal_splits"]["args"]["output_dir"])
    orthosplit_parser.set_defaults(func=lambda args: importlib.import_module("modules.create_orthogonal_splits").run(args))
    # orthosplit_parser.set_defaults(func=importlib.import_module("create_orthogonal_splits").run)

    args = parser.parse_args()

    if hasattr(args, 'func'):
        args.func(args)
    else:
        parser.print_help()

if __name__ == "__main__":
    main()
