#!/usr/bin/env python

import argparse
import importlib

def main():
    parser = argparse.ArgumentParser(prog="hashFrag")
    subparsers = parser.add_subparsers(dest="command")

    # blastn
    blast_parser = subparsers.add_parser("blastn")
    blast_parser.add_argument('-f','--fasta_path',type=str,required=True,help="")
    blast_parser.add_argument('-w','--word_size',type=int,default=11,help="")
    blast_parser.add_argument('-g','--gapopen',type=int,default=2,help="")
    blast_parser.add_argument('-x','--gapextend',type=int,default=1,help="")
    blast_parser.add_argument('-p','--penalty',type=int,default=-1,help="")
    blast_parser.add_argument('-r','--reward',type=int,default=1,help="")
    blast_parser.add_argument('-m','--max_target_seqs',type=int,default=500,help="")
    blast_parser.add_argument('-e','--e_value',type=int,default=10,help="")
    blast_parser.add_argument('-d','--dust',type=str,default="no",help="")
    blast_parser.add_argument('-b','--blastdb_args',type=str,default=None,help="")
    blast_parser.add_argument('--exec_blastdb_only',type=bool,default=False,help="")
    blast_parser.add_argument('-B','--blastn_args',type=str,default=None,help="")
    blast_parser.add_argument('-t','--threads',type=int,default=1,help="")
    blast_parser.add_argument('-o','--output_path',type=str,required=True,help="")
    blast_parser.set_defaults(func=importlib.import_module("blastn").run)

    # compute_recall (tuning)
    # recall_parser = subparsers.add_parser("compute_recall")
    # recall_parser.add_argument('-c','--collisions_path',type=str,required=True,help="")
    # recall_parser.add_argument('-d','--score_matrix_path',type=str,required=True,help="")
    # recall_parser.add_argument('-s','--step',type=int,default=1,help='')
    # recall_parser.add_argument('-o','--output_path',type=str,required=True,help="")
    # recall_parser.set_defaults(func=importlib.import_module("compute_recall").run)

    # filter_false_positives
    filtering_parser = subparsers.add_parser("filter_false_positives")
    filtering_parser.add_argument('-s','--score_dir',type=str,required=True,help="")
    filtering_parser.add_argument('-b','--blast_dir',type=str,required=True,help="")
    filtering_parser.add_argument('-t','--threshold',type=int,required=True,help='')
    filtering_parser.set_defaults(func=importlib.import_module("filter_false_positives").run)

    args = parser.parse_args()

    if hasattr(args, 'func'):
        args.func(args)
    else:
        parser.print_help()

if __name__ == "__main__":
    main()