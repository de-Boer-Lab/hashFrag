#!/usr/bin/env python

import argparse
import importlib

def main():
    parser = argparse.ArgumentParser(prog="hashFrag")
    subparsers = parser.add_subparsers(dest="command")

    # lsh_forest
    hashing_parser = subparsers.add_parser("lsh_forest")
    hashing_parser.add_argument('-f','--fasta_path',type=str,required=True,help="")
    hashing_parser.add_argument('-k','--kmer_size',type=int,default=11,help="")
    hashing_parser.add_argument('-p','--permutations',type=int,default=128,help="")
    hashing_parser.add_argument('-t','--n_trees',type=int,default=16,help="")
    hashing_parser.add_argument('-n','--neighbours',type=int,default=100,help="")
    hashing_parser.add_argument('-s','--seed',type=int,default=0,help="")
    hashing_parser.add_argument('-o','--output_path',type=str,required=True,help="")
    hashing_parser.set_defaults(func=importlib.import_module("lsh_forest").run)

    # compute_recall (tuning)
    recall_parser = subparsers.add_parser("compute_recall")
    recall_parser.add_argument('-c','--collisions_path',type=str,required=True,help="")
    recall_parser.add_argument('-d','--score_matrix_path',type=str,required=True,help="")
    recall_parser.add_argument('-s','--step',type=int,default=1,help='')
    recall_parser.add_argument('-o','--output_path',type=str,required=True,help="")
    recall_parser.set_defaults(func=importlib.import_module("compute_recall").run)

    # filter_false_positives
    filtering_parser = subparsers.add_parser("filter_false_positives")
    filtering_parser.add_argument('-f','--fasta_path',type=str,required=True,help="")
    filtering_parser.add_argument('-c','--collisions_path',type=str,required=True,help="")
    filtering_parser.add_argument('-t','--threshold',type=int,required=True,help='')
    filtering_parser.add_argument('-o','--output_path',type=str,required=True,help="")
    filtering_parser.set_defaults(func=importlib.import_module("filter_false_positives").run)

    args = parser.parse_args()

    if hasattr(args, 'func'):
        args.func(args)
    else:
        parser.print_help()

if __name__ == "__main__":
    main()