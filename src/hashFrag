#!/usr/bin/env python

import argparse
import importlib

def main():
    parser = argparse.ArgumentParser(prog="hashFrag")
    subparsers = parser.add_subparsers(dest="command")

    # blastn
    blast_parser = subparsers.add_parser("blastn")
    blast_parser.add_argument('-f','--fasta_path',type=str,default=None,help="Input FASTA file to subject to shared homology identification.")
    blast_parser.add_argument('--train_fasta_path',type=str,default=None,help="Input FASTA file to subject to shared homology identification.")
    blast_parser.add_argument('--test_fasta_path',type=str,default=None,help="Input FASTA file to subject to shared homology identification.")
    blast_parser.add_argument('-w','--word_size',type=int,default=11,help="Length of exact matching subsequences of initial match.")
    blast_parser.add_argument('-g','--gapopen',type=int,default=2,help="Penalty for opening gap in the alignment.")
    blast_parser.add_argument('-x','--gapextend',type=int,default=1,help="Penalty for extending an existing gap in the alignment.")
    blast_parser.add_argument('-p','--penalty',type=int,default=-1,help="Nucleotide mismatch in penalty the alignment.")
    blast_parser.add_argument('-r','--reward',type=int,default=1,help="Nucleotide match reward in the alignment.")
    blast_parser.add_argument('-m','--max_target_seqs',type=int,default=500,help="The maximum number of target sequences that can be returned per query sequence.")
    blast_parser.add_argument('-e','--e_value',type=int,default=10,help="The likelihood threshold required to report sequences as a match.")
    blast_parser.add_argument('-d','--dust',type=str,default="no",help="Filter low-complexity (e.g., repetitive) regions?")
    blast_parser.add_argument('-b','--blastdb_args',type=str,default=None,help="Pass additional arguments for makeblastdb call.")
    blast_parser.add_argument('--blastdb_label',type=str,default=None,help="Pass additional arguments for makeblastdb call.")
    blast_parser.add_argument('-B','--blastn_args',type=str,default=None,help="Pass additional arguments for blastn call.")
    blast_parser.add_argument('-t','--threads',type=int,default=1,help="The number of CPUs for database search.")
    blast_parser.add_argument('-o','--out_dir',type=str,required=True,help="Directory to write BLASTn results.")
    blast_parser.set_defaults(func=importlib.import_module("blastn").run)

    # filter_false_positives
    filtering_parser = subparsers.add_parser("filter_false_positives")
    filtering_parser.add_argument('-i','--input_path',type=str,required=True,help="")
    filtering_parser.add_argument('-m','--mode',type=str,required=True,help="Permissible values include: {'lightning','pure'}.")
    filtering_parser.add_argument('-g','--gapopen',type=int,default=2,help="Penalty for opening gap in the alignment.")
    filtering_parser.add_argument('-x','--gapextend',type=int,default=1,help="Penalty for extending an existing gap in the alignment.")
    filtering_parser.add_argument('-p','--penalty',type=int,default=-1,help="Nucleotide mismatch in penalty the alignment.")
    filtering_parser.add_argument('-r','--reward',type=int,default=1,help="Nucleotide match reward in the alignment.")
    filtering_parser.add_argument('-t','--threshold',type=int,required=True,help='')
    filtering_parser.add_argument('-o','--out_dir',type=str,required=True,help="")
    filtering_parser.set_defaults(func=importlib.import_module("filter_false_positives").run)

    # filter_existing_splits
    filteredsplit_parser = subparsers.add_parser("filter_existing_splits")
    filteredsplit_parser.add_argument('--train_fasta_path',type=str,required=True,help="")
    filteredsplit_parser.add_argument('--test_fasta_path',type=str,required=True,help="")
    filteredsplit_parser.add_argument('--hits_path',type=str,required=True,help="")
    filteredsplit_parser.set_defaults(func=importlib.import_module("filter_existing_splits").run)

    # stratify_test_split
    stratification_parser = subparsers.add_parser("stratify_test_split")
    stratification_parser.add_argument('-f','--test_fasta_path',type=str,required=True,help="")
    stratification_parser.add_argument('-i','--input_path',type=str,required=True,help="")
    stratification_parser.add_argument('-m','--mode',type=str,required=True,help="Permissible values include: {'lightning','pure'}.")
    stratification_parser.add_argument('-g','--gapopen',type=int,default=2,help="Penalty for opening gap in the alignment.")
    stratification_parser.add_argument('-x','--gapextend',type=int,default=1,help="Penalty for extending an existing gap in the alignment.")
    stratification_parser.add_argument('-p','--penalty',type=int,default=-1,help="Nucleotide mismatch in penalty the alignment.")
    stratification_parser.add_argument('-r','--reward',type=int,default=1,help="Nucleotide match reward in the alignment.")
    stratification_parser.add_argument('-s','--step',type=int,default=10,help="")
    stratification_parser.add_argument('-o','--output_path',type=str,required=True,help='')
    stratification_parser.set_defaults(func=importlib.import_module("stratify_test_split").run)

    # identify_homologous_groups
    homology_parser = subparsers.add_parser("identify_homologous_groups")
    homology_parser.add_argument('-i','--hits_path',type=str,required=True,help="")
    homology_parser.add_argument('-o','--output_path',type=str,required=True,help='')
    homology_parser.set_defaults(func=importlib.import_module("identify_homologous_groups").run)

    # create_orthogonal_splits
    orthosplit_parser = subparsers.add_parser("create_orthogonal_splits")
    orthosplit_parser.add_argument('-f','--fasta_path',type=str,required=True,help="")
    orthosplit_parser.add_argument('-i','--homology_path',type=str,required=True,help="")
    orthosplit_parser.add_argument('--p_train',type=float,default=0.8,help="")
    orthosplit_parser.add_argument('--p_test',type=float,default=0.2,help="")
    orthosplit_parser.add_argument('-n','--n_splits',type=int,default=1,help="")
    orthosplit_parser.add_argument('-s','--seed',type=int,default=21,help="")
    orthosplit_parser.add_argument('-o','--out_dir',type=str,required=True,help='')
    orthosplit_parser.set_defaults(func=importlib.import_module("create_orthogonal_splits").run)


    args = parser.parse_args()

    if hasattr(args, 'func'):
        args.func(args)
    else:
        parser.print_help()

if __name__ == "__main__":
    main()