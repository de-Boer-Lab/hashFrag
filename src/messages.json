{
    "hashFrag_description":"hashFrag is a tool developed to mitigate the impacts of homology-based data leakage in sequence-to-expression models. By identifying homology (based on pairwise alignment scores) in a sequence dataset, this tool can be used to filter homologous sequences spanning existing train-test splits (e.g., chromosomal splits), stratify a test split according to different levels of homology, or create homology-aware train-test splits.",
    "blastn_module":{
        "help":"A wrapper script calling BLASTn to identify candidate pairs of sequences sharing regions with high similarity.",
        "description":"A wrapper script calling the BLASTn algorithm to identify candidate pairs of sequences sharing regions with high similarity. If only 'fasta_path' is specified, all possible candidate pairs considered. However, if 'train_fasta_path' AND 'test_fasta_path' are specified, the BLAST database will be composed of the train sequences and each test sequence will be queried against the database.",
        "args":{
            "fasta_path":"Input FASTA file containing all sequences in the dataset. All sequences will comprise the BLAST database and each sequence will subsequently be queried against it.",
            "train_fasta_path":"Input FASTA file for the training data split, which will comprise the BLAST database.",
            "test_fasta_path":"Each sequence will be queried against the train split BLAST database.",
            "word_size":"Length of exact matching subsequences of initial match.",
            "gapopen":"Penalty for opening gap in the alignment.",
            "gapextend":"Penalty for extending an existing gap in the alignment.",
            "penalty":"Nucleotide mismatch in penalty the alignment.",
            "reward":"Nucleotide match reward in the alignment.",
            "max_target_seqs":"The maximum number of target sequences that can be returned per query sequence.",
            "e_value":"The likelihood threshold required to report sequences as a match.",
            "dust":"Filter low-complexity (e.g., repetitive) regions.",
            "blastdb_args":"Pass additional arguments for makeblastdb call.",
            "blastdb_label":"A label for the BLAST database.",
            "blastn_args":"Pass additional arguments for blastn call.",
            "threads":"The number of CPUs for database search.",
            "output_dir":"Directory to write BLASTn results."
        }
    },
    "filter_candidates_module":{
        "help":"Filter candidate pairs based on a specified alignment score threshold (false-positive removal).",
        "description":"Filter candidate pairs based on a specified alignment score threshold. False-positive removal step. If called with 'lightning' mode, a corrected BLAST alignment score will be calculated for each candidate pair -- filtering will be with respect to this corrected score.",
        "args":{
            "input_path":"Either the BLAST results file (tabular format) or manually computed alignment scores in tab-delimited format.",
            "mode":"The alignment scoring system upon which the filtering is based. Permissible values include: {'lightning','pure'}.",
            "gapopen":"Penalty for opening gap in the alignment.",
            "gapextend":"Penalty for extending an existing gap in the alignment.",
            "penalty":"Nucleotide mismatch in penalty the alignment.",
            "reward":"Nucleotide match reward in the alignment.",
            "threshold":"Alignment score threshold to discern a pair of sequences as homologous or a false-positive candidate.",
            "output_dir":"Directory to output the filtered list of homologous sequence pairs (tab-delimited format)."
        }
    },
    "filter_test_split_module":{
        "help":"Filter test sequences that exhibit homology with any train sequences.",
        "description":"Provided the filtered list of homology identified with the BLASTn algorithm, filter test sequences that exhibit homology with any train sequences.",
        "args":{
            "train_fasta_path":"Input FASTA file for the training sequences.",
            "test_fasta_path":"Input FASTA file for the testing sequences",
            "hits_path":"Filtered list of sequence pairs exhibiting high alignment score (i.e., homology)."
        }
    },
    "stratify_test_split_module":{
        "help":"Stratify the test split into subsplits based on their maximum alignment score to the sequences in the train split.",
        "description":"Given the calculated alignment scores for all candidates identified with the BLASTn algorithm, stratify the test split into subsplits based on their maximum alignment score to the sequences in the train split. This feature can be useful for investigating model performance as a function of test splits of varying degrees of orthogonality to the train split. If called with 'lightning' mode, a corrected BLAST alignment score will be calculated for each candidate pair and used for stratification.",
        "args":{
            "test_fasta_path":"Input FASTA file for the testing sequences",
            "input_path":"Either the BLAST results file (tabular format) or manually computed alignment scores in tab-delimited format.",
            "mode":"The alignment scoring system upon which the filtering is based. Permissible values include: {'lightning','pure'}.",
            "gapopen":"Penalty for opening gap in the alignment.",
            "gapextend":"Penalty for extending an existing gap in the alignment.",
            "penalty":"Nucleotide mismatch in penalty the alignment.",
            "reward":"Nucleotide match reward in the alignment.",
            "step":"The step size refers to how large each alignment score range is.",
            "output_path":"A tab-delimited file containing the stratified level of each sequence in the test split."
        }
    },
    "identify_homologous_groups_module":{
        "help":"Identify all distinct groups of homologous sequences.",
        "description":"Provided the filtered list of homology identified with the BLASTn algorithm, identify all distinct groups of homologous sequences. This will only include homologous group labels for sequences exhibiting homology with at least one other sequence.",
        "args":{
            "hits_path":"Filtered list of sequence pairs exhibiting high alignment score (i.e., homology).",
            "output_path":"A tab-delimited file containing the homologous group labels that the relevant sequences in the test split belong to."
        }
    },
    "create_orthogonal_splits_module":{
        "help":"Create homology-aware test-train splits.",
        "description":"Given the clustering of sequences based on homology ('identify_homologous_groups'), create homology-aware test-train splits. This is accomplished via a graph-based method where nodes are sequences and edges denote a pair of sequences exhibiting homology. From there, the task involves identifying all homologous groups is equivalent to finding disconnected subgraphs in the population.",
        "args":{
            "fasta_path":"Input FASTA file containing all sequences in the dataset.",
            "homology_path":"The tab-delimited file containing the homologous group labels that the relevant sequences in the test split belong to (output file of 'identify_homologous_groups').",
            "p_train":"The proportion of sequences to send to the train data split.",
            "p_test":"The proportion of sequences to send to the test data split.",
            "n_splits":"Number of split replicates to create.",
            "seed":"Random seed to use for the creation of homology-aware data splits.",
            "output_dir":"The directory to write the created train-test splits."
        }
    },
    "filter_existing_splits":{
        "help":"Execute the full workflow of commands to filter homology spanning the input test splits.",
        "description":"Execute the full workflow of commands to filter homology spanning the input test splits. This involves identifying identifying pairs of sequences sharing similarities with BLAST, filtering candidates based on a specified threshold, and filtering the input test split such that there exist no shared homology between the train and test splits.."
    },
    "stratify_test_split":{
        "help":"Execute the full workflow of commands to stratify the test split based on their maximum pairwise alignment score to the train split sequences.",
        "description":"Execute the full workflow of commands to stratify the test split based on their maximum pairwise alignment score to the train split sequences. This involves identifying pairs of sequences sharing similarities with BLAST, and then stratiyfing the test split into subsplits based on the corrected BLAST alignment score."
    },
    "create_orthogonal_splits":{
        "help":"Execute the full workflow of commands to create homology-aware train-test splits.",
        "description":"Execute the full workflow of commands to create homology-aware train-test splits. This involves identifying identifying pairs of sequences sharing similarities with BLAST, filtering candidates based on a specified threshold, identifying all the different subgroups of sequences exhibiting a distinct case of homology, and creating train-test splits with no leakage."
    }
  }